.data
    message1: .asciiz "Input is empty"
    message2: .asciiz "Input is too long"
    message3: .asciiz "Invalid base-36 number"
    userinput: .space 20
    newline:   .asciiz "\n"
    space:     .asciiz " "
.text
    main:
        li $v0, 8 #getting user input as text
        la $a0, userinput
        li $a1, 20  #storing 20 bytes as space
        syscall
    strcpy:
  	li $t4, 32 # space 
  	li $t5, 1  
  	li $t6, 1
  	la $a1, userinput
        add  $t0, $zero, $zero   # i = 0
    L1: add  $t1, $a1, $t0       # $t1 holds address of y[i]
        lb   $t2, 0($t1)         # $t2 holds value of y[i]
        slt $t3, $t2, $t4
        slt $t3, $t4, $t2
        addi $t3, $t3, 1
        and $t3, $t3, $t5
        bne $t3, $t6, L3
        j delete_first_space
 L3:	
   	li $t5, 0
        beq  $t2, $zero, out     # if y[i]==0 (null character),leave loop       
        add  $t3, $a0, $t0       # $t3 holds address of x[i]
        sb   $t2, 0($t3)         # x[i] = y[i]
        addi $t0, $t0, 1         # i = i + 1 
        j    L1                  # go to top of loop
   out: add  $t3, $a0, $t0       # $t3 holds address of x[i]
        sb   $zero, 0($t3)       # x[i] = 0 (to terminate string)
        j continue

   delete_first_space:
	addi $a1, $a1, 1
	j L1
  continue:      
        #li $v0, 4
        #add $t3, $a0, $zero 
        #la $a0, ($t3)
        #syscall
        
 get_len:
	li $t1, 0 #make $t1 0
        move $t0, $a0  #put userinput into $t0
    loop: #trying to find length of the string
         lb $a0, 0($t0) #loading data of the first index inside $a0 (0)
         #li $v0, 1
         #addi $a0, $a0 0
         #syscall
         beqz $a0, done #branch statement if $a0 is empty go to done
         addi $t0, $t0, 1 
         addi $t1, $t1, 1
         j    loop
         
         #subi $t1, $t1, 1 #to remove the null character
         #li $v0, 1  #to print the integer
         #add $a0, $0, $t1 
         #syscall
    done:
         subi $t1, $t1, 1 #to remove the null character
         li $v0, 1  #to print the integer
         add $a0, $0, $t1 
         syscall
         beqz $t1, empty #branch statement to determine if it empty
         li $t2, 5
         slt $t0, $t1, $t2
         beqz $t0, Greater
         j    check
    empty: 
        li $v0, 4
        la $a0, message1 #displays input is empty
        syscall
        j end
    Greater:
       li $v0, 4
       la $a0, message2 #displays input is too long
       syscall
       j end
       
   check:  
   	la $t5, userinput
   	li $t3, 1
       loop2: 
           bgt $t0, $t1, solve #checks if t0 is greater than t1 then go to solve
           addi $t0, $t0, 1 #adds 1 to t0
           lb $s0, 0($t5) #loads the first element of t5(userinput) into s0
           addi $t5, $t5, 1 #increases index by 1
           addi $t2, $s0, -48 #subtracts 48 from s0 and stores in t2 (to start from 0)
           sltiu $t2, $t2, 10 #checks if it is less than 10
           bne $t2, $t3, check_uppercase #if it is greater than 10 it is invalid
           j loop2
           check_uppercase:
           	addi $t2, $s0, -65 #subtracts 48 from s0 and stores in t2 (to start from 0)
           	sltiu $t2, $t2, 16 #checks if it is less than 10
           	bne $t2, $t3, lower_case #if it is greater than 10 it is invalid
           j loop2	
           lower_case:
           	addi $t2, $s0, -97 #subtracts 48 from s0 and stores in t2 (to start from 0)
           	sltiu $t2, $t2, 16 #checks if it is less than 10
           	bne $t2, $t3, print_invalid #if it is greater than 10 it is invalid
           j loop2
        
           
   solve:   
     
        #li $v0, 4
        #la $a0, userinput #prints user input
        #syscall
        j end
   print_invalid:
   	li $v0, 4
       la $a0, message3 #displays input is too long
       syscall 
        
   #strcpy_1:
  	#li $t4, 32 # space 
  	#li $t5, 1  
  	#li $t6, 1
  	#move $a1, $t0
  	#li $v0, 4
  	#la $a0, ($t0)
  	#syscall
  	#li $v0, 4
        #add $t3, $a0, $zero 
        #la $a0, ($t3)
        #syscall
  	#add $t7, $zero, $zero #has the length of the string
  	#subi $t7, $t7, 1
  	#la $a1, userinput
        #add  $t0, $zero, $zero   # i = 0 
        #lb $a0, 0($t0)
       # la $a0, ($a0)
       # li $v0, 11
       # syscall    
              
               
   end:
   	
   	li $v0, 10
   	syscall
   